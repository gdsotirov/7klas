-- MySQL Script generated by MySQL Workbench
-- Tue Jul  2 19:28:41 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema 7klas
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema 7klas
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `7klas` DEFAULT CHARACTER SET utf8mb4 ;
USE `7klas` ;

-- -----------------------------------------------------
-- Table `7klas`.`cities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`cities` (
  `id` INT NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`districts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`districts` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `num` INT NOT NULL,
  `city_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reg_city_idx` (`city_id` ASC) VISIBLE,
  CONSTRAINT `fk_reg_city`
    FOREIGN KEY (`city_id`)
    REFERENCES `7klas`.`cities` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`schools`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`schools` (
  `id` INT NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `short_name` VARCHAR(32) NOT NULL,
  `telephone` VARCHAR(32) NULL,
  `address` VARCHAR(128) NULL,
  `email` VARCHAR(64) NULL,
  `url` VARCHAR(128) NULL,
  `city_id` INT NOT NULL,
  `district_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_sch_city_idx` (`city_id` ASC) VISIBLE,
  INDEX `fk_sch_district_idx` (`district_id` ASC) VISIBLE,
  CONSTRAINT `fk_sch_city`
    FOREIGN KEY (`city_id`)
    REFERENCES `7klas`.`cities` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_sch_district`
    FOREIGN KEY (`district_id`)
    REFERENCES `7klas`.`districts` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`subjects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`subjects` (
  `id` VARCHAR(5) NOT NULL,
  `name` VARCHAR(42) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`classes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`classes` (
  `yr` YEAR NOT NULL COMMENT 'School year starting',
  `school_id` INT NOT NULL,
  `id` INT NOT NULL,
  `name` VARCHAR(96) NOT NULL,
  `numcl` DECIMAL(2,1) NULL COMMENT 'Number of classes',
  `coef_bel` INT NULL COMMENT 'Coefficient for BEL result',
  `coef_mat` VARCHAR(45) NULL COMMENT 'Coefficient for MAT result',
  `subj1_id` VARCHAR(5) NULL COMMENT 'Subject 1',
  `subj2_id` VARCHAR(5) NULL COMMENT 'Subject 2',
  PRIMARY KEY (`yr`, `id`),
  INDEX `fk_class_school_idx` (`school_id` ASC) VISIBLE,
  INDEX `fk_class_subj1_idx` (`subj1_id` ASC) VISIBLE,
  INDEX `fk_class_subj2_idx` (`subj2_id` ASC) VISIBLE,
  CONSTRAINT `fk_class_school`
    FOREIGN KEY (`school_id`)
    REFERENCES `7klas`.`schools` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_class_subj1`
    FOREIGN KEY (`subj1_id`)
    REFERENCES `7klas`.`subjects` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_class_subj2`
    FOREIGN KEY (`subj2_id`)
    REFERENCES `7klas`.`subjects` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`students`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`students` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL COMMENT 'Full name',
  `score_nea_bel` INT NOT NULL COMMENT 'Score from National External Assessment BEL',
  `score_nea_mat` INT NOT NULL COMMENT 'Score from National External Assessment MAT',
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`subj_marks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`subj_marks` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `student_id` INT NOT NULL,
  `subject_id` VARCHAR(5) NOT NULL,
  `mark` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_sm_student_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_sm_subject_idx` (`subject_id` ASC) VISIBLE,
  CONSTRAINT `fk_sm_student`
    FOREIGN KEY (`student_id`)
    REFERENCES `7klas`.`students` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_sm_subject`
    FOREIGN KEY (`subject_id`)
    REFERENCES `7klas`.`subjects` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`class_rankings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`class_rankings` (
  `yr` YEAR NOT NULL,
  `class_id` INT NOT NULL,
  `min_rank_I` DECIMAL(5,2) NOT NULL COMMENT 'Minimal rank from Ist ranking',
  `min_rank_II` DECIMAL(5,2) NOT NULL COMMENT 'Minimal rank from IInd ranking',
  `max_rank_I` DECIMAL(5,2) NOT NULL COMMENT 'Maximal rank from Ist ranking',
  `max_rank_II` VARCHAR(45) NOT NULL COMMENT 'Maximal rank from IInd ranking',
  PRIMARY KEY (`yr`, `class_id`),
  CONSTRAINT `fk_cr_class`
    FOREIGN KEY (`yr` , `class_id`)
    REFERENCES `7klas`.`classes` (`yr` , `id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `7klas`.`min_max_1_in`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`min_max_1_in` (
  `yr` YEAR NOT NULL,
  `school_id` INT NOT NULL,
  `class_id` INT NOT NULL,
  `class_name` VARCHAR(96) NOT NULL,
  `min_rank` DECIMAL(5,2) NOT NULL,
  `max_rank` DECIMAL(5,2) NOT NULL,
  PRIMARY KEY (`yr`, `school_id`, `class_id`),
  INDEX `fk_school_id_1_idx` (`school_id` ASC) VISIBLE,
  CONSTRAINT `fk_school_id_1`
    FOREIGN KEY (`school_id`)
    REFERENCES `7klas`.`schools` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Table for loading data from I-st ranking';


-- -----------------------------------------------------
-- Table `7klas`.`min_max_2_in`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`min_max_2_in` (
  `yr` YEAR NOT NULL,
  `school_id` INT NOT NULL,
  `class_id` INT NOT NULL,
  `class_name` VARCHAR(96) NOT NULL,
  `min_rank` DECIMAL(5,2) NOT NULL,
  `max_rank` DECIMAL(5,2) NOT NULL,
  PRIMARY KEY (`yr`, `school_id`, `class_id`),
  INDEX `fk_school_id_2_idx` (`school_id` ASC) VISIBLE,
  CONSTRAINT `fk_school_id_2`
    FOREIGN KEY (`school_id`)
    REFERENCES `7klas`.`schools` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Table for loading data from II-nd ranking';

USE `7klas` ;

-- -----------------------------------------------------
-- Placeholder table for view `7klas`.`ClassRanks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`ClassRanks` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `7klas`.`ClassRanksJSON`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`ClassRanksJSON` (`json_obj` INT);

-- -----------------------------------------------------
-- Placeholder table for view `7klas`.`Schools`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `7klas`.`Schools` (`Code` INT, `Name` INT, `City` INT, `District` INT);

-- -----------------------------------------------------
-- function markToScore
-- -----------------------------------------------------

DELIMITER //
USE `7klas`//
CREATE FUNCTION markToScore(mark INT)
  RETURNS INT
  DETERMINISTIC
BEGIN
  DECLARE score INT;

  SET score := CASE mark
    WHEN 6 THEN 50
    WHEN 5 THEN 39
    WHEN 4 THEN 26
    WHEN 3 THEN 15
    ELSE 0
  END;

  RETURN score;
END//

DELIMITER ;

-- -----------------------------------------------------
-- View `7klas`.`ClassRanks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `7klas`.`ClassRanks`;
USE `7klas`;
CREATE OR REPLACE VIEW ClassRanks AS
SELECT ROW_NUMBER() OVER(
         PARTITION BY CR.yr
         ORDER BY CR.yr, CR.min_rank_II DESC)       AS rnkNum,
       CAST(CR.yr AS CHAR(4))                       AS clsYear,
       CONCAT(D.id, ' ', D.`name`)                  AS schlDist,
       CONCAT(SC.id, ' ', SC.short_name)            AS schlName,
       CONCAT(LPAD(CL.id, 4, '0'), ' ', CL.`name`)  AS clsName,
       CR.min_rank_I                                AS min_rank_I,
       CR.min_rank_II                               AS min_rank_II
  FROM classes        CL,
       class_rankings CR,
       districts      D,
       schools        SC
 WHERE CR.class_id    = CL.id
   AND CR.yr          = CL.yr
   AND SC.district_id = D.id
   AND CL.school_id   = SC.id
   AND ( CR.min_rank_I > 0 OR CR.min_rank_II > 0 )
 ORDER BY CR.yr, CR.min_rank_II DESC;

-- -----------------------------------------------------
-- View `7klas`.`ClassRanksJSON`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `7klas`.`ClassRanksJSON`;
USE `7klas`;
CREATE OR REPLACE VIEW ClassRanksJSON AS
SELECT JSON_OBJECT("rnkNum"     , rnkNum,
                   "clsYear"    , clsYear,
                   "schlDist"   , schlDist,
                   "schlName"   , schlName,
                   "clsName"    , clsName,
                   "min_rank_I" , min_rank_I,
                   "min_rank_II", min_rank_II
                  ) json_obj
  FROM ClassRanks;

-- -----------------------------------------------------
-- View `7klas`.`Schools`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `7klas`.`Schools`;
USE `7klas`;
CREATE OR REPLACE VIEW Schools AS
SELECT S.id     AS `Code`,
       S.`name` AS `Name`,
       C.`name` AS `City`,
       D.`name` AS `District`
  FROM cities    C,
       districts D,
       schools   S
 WHERE C.id = S.city_id
   AND D.id = S.district_id
  ORDER BY S.id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
